{"message":"Not Found","documentation_url":"https://docs.github.com/rest/git/refs#get-all-references-in-a-namespace","status":"404","name":"dccedcefedeb","url":"file:///C:/Users/Administrator/Desktop/acc/index.html.html","showName":"马承-新概念","appid":"com.dccedcefedeb.pakeplus","icon":"","iconRound":true,"state":true,"single":true,"injectJq":true,"tauriApi":false,"devbug":false,"version":"0.0.1","preview":"desktop","platform":["1-1","2-2"],"width":800,"height":600,"desc":"","jsFile":[],"filterCss":"","customJs":"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>小学英语学习助手</title>\n  <!-- 引入外部资源 -->\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n  <link href=\"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  \n  <!-- Tailwind配置 -->\n  <script>\n    tailwind.config = {\n      theme: {\n        extend: {\n          colors: {\n            primary: '#4F46E5', // 主色调：靛蓝色\n            secondary: '#EC4899', // 辅助色：粉色\n            neutral: '#F3F4F6', // 中性色：浅灰\n            level1: '#10B981', // L1级别颜色：绿色\n            level2: '#F59E0B', // L2级别颜色：橙色\n            level3: '#3B82F6', // L3级别颜色：蓝色\n            level4: '#8B5CF6', // L4级别颜色：紫色\n          },\n          fontFamily: {\n            sans: ['Open Sans', 'system-ui', 'sans-serif'],\n          },\n        },\n      }\n    }\n  </script>\n  \n  <!-- 自定义工具类 -->\n  <style type=\"text/tailwindcss\">\n    @layer utilities {\n      .content-auto {\n        content-visibility: auto;\n      }\n      .keyboard-key {\n        @apply w-10 h-10 md:w-12 md:h-12 rounded-lg bg-white shadow-md flex items-center justify-center text-gray-800 font-bold text-lg cursor-pointer transition-all duration-150 hover:bg-primary hover:text-white active:scale-95;\n      }\n      .letter-underline {\n        @apply w-10 h-14 md:w-12 md:h-16 flex items-center justify-center border-b-2 border-gray-400 text-xl md:text-2xl font-bold mx-1 transition-all;\n      }\n      .letter-underline-filled {\n        @apply border-b-2 border-primary text-primary;\n      }\n      .delete-btn {\n        @apply p-2 text-red-500 hover:text-red-700 transition-colors;\n      }\n      .delete-btn:hover {\n        @apply bg-red-50 rounded-full;\n      }\n      .audio-control-btn {\n        @apply relative p-2 rounded-full hover:bg-gray-100 transition-all duration-300;\n      }\n      .phonetic-text {\n        @apply text-gray-500 italic text-base md:text-lg font-medium;\n      }\n      .translation-text {\n        @apply text-gray-600 text-base md:text-lg font-medium;\n      }\n      .level-tab {\n        @apply px-4 py-2 rounded-lg font-medium transition-all duration-300 cursor-pointer;\n      }\n      .level-tab-active {\n        @apply bg-primary text-white shadow-md;\n      }\n      .level1-tab-active {\n        @apply bg-level1 text-white shadow-md;\n      }\n      .level2-tab-active {\n        @apply bg-level2 text-white shadow-md;\n      }\n      .level3-tab-active {\n        @apply bg-level3 text-white shadow-md;\n      }\n      .level4-tab-active {\n        @apply bg-level4 text-white shadow-md;\n      }\n    }\n  </style>\n  \n  <style>\n    /* 保留原有的CSS样式 */\n    .fade-in {\n      animation: fadeIn 0.5s ease-in-out;\n    }\n    \n    @keyframes fadeIn {\n      from { opacity: 0; transform: translateY(10px); }\n      to { opacity: 1; transform: translateY(0); }\n    }\n    \n    .bounce {\n      animation: bounce 0.5s ease-in-out;\n    }\n    \n    @keyframes bounce {\n      0%, 100% { transform: translateY(0); }\n      50% { transform: translateY(-10px); }\n    }\n    \n    .key-press {\n      animation: keyPress 0.15s ease-in-out;\n    }\n    \n    @keyframes keyPress {\n      0% { transform: scale(1); }\n      50% { transform: scale(0.9); }\n      100% { transform: scale(1); }\n    }\n    \n    .error-letter {\n      position: absolute;\n      color: #EF4444;\n      font-size: 1.5rem;\n      font-weight: bold;\n      animation: errorLetter 0.5s ease-in-out forwards;\n      pointer-events: none;\n    }\n    \n    @keyframes errorLetter {\n      0% { \n        opacity: 1;\n        transform: translateY(0);\n      }\n      50% {\n        opacity: 1;\n        transform: translateY(-20px);\n      }\n      100% {\n        opacity: 0;\n        transform: translateY(-30px);\n      }\n    }\n    \n    .partial-hint {\n      position: absolute;\n      background-color: rgba(79, 70, 229, 0.9);\n      color: white;\n      padding: 4px 8px;\n      border-radius: 4px;\n      font-size: 1rem;\n      font-weight: bold;\n      z-index: 10;\n      pointer-events: none;\n      animation: fadeInOut 1s ease-in-out forwards;\n    }\n    \n    @keyframes fadeInOut {\n      0% { opacity: 0; transform: translateY(-10px); }\n      20% { opacity: 1; transform: translateY(0); }\n      80% { opacity: 1; transform: translateY(0); }\n      100% { opacity: 0; transform: translateY(-10px); }\n    }\n    \n    .hide-scrollbar::-webkit-scrollbar {\n      display: none;\n    }\n    .hide-scrollbar {\n      -ms-overflow-style: none;\n      scrollbar-width: none;\n    }\n    \n    #custom-dict-modal {\n      z-index: 9999;\n    }\n    \n    .empty-state {\n      text-align: center;\n      padding: 4rem 2rem;\n      color: #6B7280;\n    }\n    \n    #batch-delete-btn {\n      transition: all 0.2s;\n    }\n    \n    #batch-delete-btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n    \n    .word-item-selected {\n      @apply bg-blue-50 border-2 border-primary;\n    }\n    \n    .audio-control-group {\n      display: flex;\n      align-items: center;\n      position: relative;\n    }\n    \n    .audio-control-panel {\n      position: absolute;\n      top: 100%;\n      right: 0;\n      margin-top: 8px;\n      background: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      padding: 12px;\n      width: 180px;\n      z-index: 100;\n      display: none;\n    }\n    \n    .audio-control-panel.active {\n      display: block;\n      animation: fadeIn 0.2s ease-in-out;\n    }\n    \n    .audio-control-label {\n      display: flex;\n      justify-content: space-between;\n      margin-bottom: 8px;\n      font-size: 12px;\n      color: #6B7280;\n    }\n    \n    input[type=\"range\"] {\n      -webkit-appearance: none;\n      height: 4px;\n      border-radius: 2px;\n      background: #ddd;\n      outline: none;\n    }\n    \n    input[type=\"range\"]::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      width: 16px;\n      height: 16px;\n      border-radius: 50%;\n      background: #4F46E5;\n      cursor: pointer;\n    }\n    \n    #sound-toggle .fa-volume-up { color: #4F46E5; }\n    #sound-toggle .fa-volume-down { color: #9CA3AF; }\n    #sound-toggle .fa-volume-off { color: #EF4444; }\n    \n    .image-preview-container {\n      border: 2px dashed #ddd;\n      border-radius: 8px;\n      padding: 1rem;\n      text-align: center;\n      transition: all 0.3s;\n    }\n    \n    .image-preview-container:hover {\n      border-color: #4F46E5;\n    }\n    \n    .image-preview {\n      max-width: 100%;\n      max-height: 200px;\n      border-radius: 4px;\n      display: none;\n      margin: 0 auto;\n    }\n    \n    .image-preview.active {\n      display: block;\n      margin-bottom: 1rem;\n    }\n    \n    .remove-image {\n      color: #EF4444;\n      cursor: pointer;\n      font-size: 0.875rem;\n      display: none;\n    }\n    \n    .remove-image.active {\n      display: inline-block;\n    }\n    \n    .phonetic-loading {\n      display: inline-block;\n      width: 16px;\n      height: 16px;\n      border: 2px solid rgba(0,0,0,.1);\n      border-radius: 50%;\n      border-top-color: #4F46E5;\n      animation: spin 1s ease-in-out infinite;\n    }\n    \n    @keyframes spin {\n      to { transform: rotate(360deg); }\n    }\n    \n    .phonetic-identify-btn {\n      @apply text-primary text-sm px-2 py-1 rounded hover:bg-primary/10 transition-colors;\n    }\n    \n    .file-upload-area {\n      border: 2px dashed #ddd;\n      border-radius: 8px;\n      padding: 2rem 1rem;\n      text-align: center;\n      transition: all 0.3s;\n      cursor: pointer;\n    }\n    \n    .file-upload-area:hover {\n      border-color: #4F46E5;\n      background-color: #f9fafb;\n    }\n    \n    .file-upload-icon {\n      font-size: 2rem;\n      color: #4F46E5;\n      margin-bottom: 1rem;\n    }\n    \n    .file-info {\n      margin-top: 1rem;\n      padding: 0.5rem;\n      background-color: #f3f4f6;\n      border-radius: 4px;\n      font-size: 0.875rem;\n      text-align: left;\n      display: none;\n    }\n    \n    .file-info.active {\n      display: block;\n    }\n    \n    .upload-progress {\n      height: 4px;\n      background-color: #e5e7eb;\n      border-radius: 2px;\n      margin-top: 0.5rem;\n      overflow: hidden;\n      display: none;\n    }\n    \n    .upload-progress.active {\n      display: block;\n    }\n    \n    .upload-progress-bar {\n      height: 100%;\n      background-color: #4F46E5;\n      width: 0%;\n      transition: width 0.3s ease;\n    }\n    \n    .upload-results {\n      margin-top: 1rem;\n      max-height: 200px;\n      overflow-y: auto;\n      display: none;\n    }\n    \n    .upload-results.active {\n      display: block;\n    }\n    \n    .result-item {\n      padding: 0.5rem;\n      margin-bottom: 0.5rem;\n      border-radius: 4px;\n      font-size: 0.875rem;\n    }\n    \n    .result-success {\n      background-color: #ecfdf5;\n      color: #059669;\n    }\n    \n    .result-error {\n      background-color: #fee2e2;\n      color: #dc2626;\n    }\n  </style>\n</head>\n\n<body class=\"bg-gradient-to-br from-indigo-50 to-purple-50 min-h-screen font-sans text-gray-800 overflow-x-hidden\">\n  <!-- 页面头部 -->\n  <header class=\"bg-white shadow-md sticky top-0 z-50 transition-all duration-300\">\n    <div class=\"container mx-auto px-4 py-3 flex justify-between items-center\">\n      <div class=\"flex items-center space-x-2\">\n        <i class=\"fa fa-book text-primary text-2xl\"></i>\n        <h1 class=\"text-xl md:text-2xl font-bold text-primary\">英语学习助手</h1>\n      </div>\n      \n      <div class=\"flex items-center space-x-4\">\n        <!-- 中文翻译显示开关 -->\n        <div class=\"relative group\">\n          <button id=\"translation-toggle\" class=\"p-2 rounded-full hover:bg-gray-100 transition-colors\">\n            <i class=\"fa fa-language text-primary transition-all duration-300\"></i>\n          </button>\n          <span class=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs py-1 px-2 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n            显示/隐藏中文翻译\n          </span>\n        </div>\n        \n        <!-- 音标显示开关 -->\n        <div class=\"relative group\">\n          <button id=\"phonetic-toggle\" class=\"p-2 rounded-full hover:bg-gray-100 transition-colors\">\n            <i class=\"fa fa-volume-up text-gray-600 transition-all duration-300\"></i>\n          </button>\n          <span class=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs py-1 px-2 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n            显示/隐藏音标\n          </span>\n        </div>\n        \n        <!-- 增强的音频控制区域 -->\n        <div class=\"audio-control-group\">\n          <button id=\"audio-control-btn\" class=\"audio-control-btn relative group\">\n            <i class=\"fa fa-volume-up text-gray-600 transition-all duration-300\"></i>\n            <span class=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs py-1 px-2 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n              音频设置\n            </span>\n          </button>\n          \n          <div id=\"audio-control-panel\" class=\"audio-control-panel\">\n            <div class=\"audio-control-label\">\n              <span>朗读音量</span>\n              <span id=\"speech-volume-value\">120%</span>\n            </div>\n            <input type=\"range\" id=\"speech-volume-slider\" min=\"0\" max=\"150\" value=\"120\" class=\"w-full mb-6\">\n            \n            <div class=\"audio-control-label\">\n              <span>音效音量</span>\n              <span id=\"effect-volume-value\">80%</span>\n            </div>\n            <input type=\"range\" id=\"effect-volume-slider\" min=\"0\" max=\"100\" value=\"80\" class=\"w-full mb-4\">\n            \n            <div class=\"flex items-center justify-between text-sm\">\n              <label class=\"flex items-center\">\n                <input type=\"checkbox\" id=\"enable-speech\" checked class=\"mr-2\">\n                <span>启用朗读</span>\n              </label>\n              <label class=\"flex items-center\">\n                <input type=\"checkbox\" id=\"enable-sound-effects\" checked class=\"mr-2\">\n                <span>启用音效</span>\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        <button id=\"settings-btn\" class=\"p-2 rounded-full hover:bg-gray-100 transition-colors relative group\">\n          <i class=\"fa fa-cog text-gray-600\"></i>\n          <span class=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs py-1 px-2 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n            设置\n          </span>\n        </button>\n      </div>\n    </div>\n  </header>\n\n  <!-- 主内容区 -->\n  <main class=\"container mx-auto px-4 py-6 md:py-10\">\n    <!-- 级别选择 - 增加了L2、L3、L4 -->\n    <div class=\"mb-6 flex flex-wrap gap-3\">\n      <div id=\"all-levels-tab\" class=\"level-tab level-tab-active\">\n        <i class=\"fa fa-th-large mr-1\"></i> 全部内容\n      </div>\n      <div id=\"level1-tab\" class=\"level-tab hover:bg-level1/10\">\n        <i class=\"fa fa-signal mr-1\"></i> L1 基础\n      </div>\n      <div id=\"level2-tab\" class=\"level-tab hover:bg-level2/10\">\n        <i class=\"fa fa-signal mr-1\"></i> L2 初级\n      </div>\n      <div id=\"level3-tab\" class=\"level-tab hover:bg-level3/10\">\n        <i class=\"fa fa-signal mr-1\"></i> L3 中级\n      </div>\n      <div id=\"level4-tab\" class=\"level-tab hover:bg-level4/10\">\n        <i class=\"fa fa-signal mr-1\"></i> L4 高级\n      </div>\n    </div>\n    \n    <!-- 学习进度 -->\n    <div class=\"mb-6 bg-white rounded-xl shadow-sm p-4\">\n      <div class=\"flex justify-between items-center mb-2\">\n        <span class=\"text-sm text-gray-500\">学习进度</span>\n        <span class=\"text-sm font-medium text-primary\" id=\"progress-text\">0/0</span>\n      </div>\n      <div class=\"w-full bg-gray-200 rounded-full h-2.5\">\n        <div id=\"progress-bar\" class=\"bg-primary h-2.5 rounded-full\" style=\"width: 0%\"></div>\n      </div>\n    </div>\n    \n    <!-- 单词学习卡片 -->\n    <div class=\"max-w-2xl mx-auto mb-8\">\n      <div class=\"bg-white rounded-2xl shadow-lg overflow-hidden\">\n        <!-- 单词图片/图标区域 -->\n        <div class=\"relative h-64 md:h-80 bg-neutral\">\n          <div id=\"word-image-container\" class=\"w-full h-full flex items-center justify-center overflow-hidden\">\n            <i id=\"default-word-icon\" class=\"fa fa-language text-6xl text-primary/30\"></i>\n            <img id=\"word-image\" class=\"max-w-full max-h-full object-contain transition-all duration-300 hidden\" src=\"\" alt=\"\">\n          </div>\n          <button id=\"play-sound\" class=\"absolute bottom-4 right-4 bg-primary/90 text-white rounded-full p-3 shadow-lg hover:bg-primary transition-colors hidden\">\n            <i class=\"fa fa-volume-up\"></i>\n          </button>\n        </div>\n        \n        <!-- 拼写区域 -->\n        <div class=\"p-6\">\n          <div class=\"mb-4\">\n            <!-- 中文翻译显示区域 -->\n            <div id=\"translation-display\" class=\"text-center mb-2 opacity-0 transition-opacity duration-300\">\n              <span class=\"translation-text\"></span>\n            </div>\n            \n            <!-- 音标显示区域 -->\n            <div id=\"phonetic-display\" class=\"text-center mb-3 opacity-0 transition-opacity duration-300\">\n              <span class=\"phonetic-text\"></span>\n            </div>\n            \n            <label class=\"block text-sm font-medium text-gray-700\">请拼写单词/句子（区分大小写）：</label>\n            \n            <!-- 字母下划线区域 -->\n            <div id=\"letter-underscores-container\" class=\"relative\">\n              <div id=\"letter-underscores\" class=\"flex justify-center my-6 flex-wrap\">\n                <!-- 字母下划线将通过JS动态生成 -->\n              </div>\n            </div>\n            \n            <div id=\"empty-state-message\" class=\"empty-state hidden\">\n              <i class=\"fa fa-plus-circle text-4xl mb-3 text-gray-300\"></i>\n              <p>还没有学习内容，请添加自定义单词或句子</p>\n            </div>\n            \n            <div id=\"error-message\" class=\"mt-1 text-red-500 text-sm hidden text-center\">拼写错误，请再试一次！</div>\n          </div>\n          \n          <!-- 提示已移除，只保留字符计数 -->\n          <div class=\"flex justify-between items-center text-sm text-gray-500\">\n            <div>\n              <span id=\"letter-count\">0个字符</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- 虚拟键盘 -->\n    <div id=\"keyboard-container\" class=\"max-w-2xl mx-auto bg-white rounded-xl shadow-lg p-4 mb-8 hidden\">\n      <div id=\"keyboard\" class=\"grid grid-cols-10 gap-2\">\n        <!-- 键盘按键将通过JS动态生成 -->\n      </div>\n    </div>\n    \n    <!-- 功能按钮区 -->\n    <div class=\"flex flex-wrap justify-center gap-4 mb-8\">\n      <button id=\"prev-word\" class=\"px-6 py-3 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 transition-colors flex items-center\" disabled>\n        <i class=\"fa fa-arrow-left mr-2\"></i> 上一个\n      </button>\n      <button id=\"next-word\" class=\"px-6 py-3 bg-primary text-white rounded-lg shadow-sm hover:bg-primary/90 transition-colors flex items-center\" disabled>\n        下一个 <i class=\"fa fa-arrow-right ml-2\"></i>\n      </button>\n      <button id=\"custom-dict-btn\" class=\"px-6 py-3 bg-secondary text-white rounded-lg shadow-sm hover:bg-secondary/90 transition-colors flex items-center\">\n        <i class=\"fa fa-plus mr-2\"></i> 自定义内容\n      </button>\n    </div>\n  </main>\n\n  <!-- 页脚 -->\n  <footer class=\"bg-white border-t border-gray-200 py-4\">\n    <div class=\"container mx-auto px-4 text-center text-sm text-gray-500\">\n      <p>© 2024 小学英语学习助手 | 让英语学习更有趣</p>\n    </div>\n  </footer>\n\n  <!-- 自定义单词模态框 -->\n  <div id=\"custom-dict-modal\" class=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 hidden fade-in\">\n    <div class=\"bg-white rounded-2xl p-6 max-w-md w-full mx-4\">\n      <div class=\"flex justify-between items-center mb-4\">\n        <h3 class=\"text-xl font-bold text-gray-800\">添加自定义内容</h3>\n        <button id=\"close-modal\" class=\"text-gray-500 hover:text-gray-700\">\n          <i class=\"fa fa-times text-xl\"></i>\n        </button>\n      </div>\n      \n      <form id=\"custom-word-form\">\n        <input type=\"hidden\" id=\"edit-word-id\" value=\"\">\n        \n        <!-- 级别选择 - 增加了L2、L3、L4 -->\n        <div class=\"mb-4\">\n          <label class=\"block text-sm font-medium text-gray-700 mb-1\">选择级别 <span class=\"text-red-500\">*</span></label>\n          <div class=\"flex gap-2 flex-wrap\">\n            <label class=\"flex items-center p-2 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors flex-1\">\n              <input type=\"radio\" name=\"word-level\" value=\"default\" checked class=\"mr-2 text-primary\">\n              <span>默认</span>\n            </label>\n            <label class=\"flex items-center p-2 border border-gray-300 rounded-lg cursor-pointer hover:bg-level1/10 transition-colors flex-1\">\n              <input type=\"radio\" name=\"word-level\" value=\"L1\" class=\"mr-2 text-level1\">\n              <span>L1 基础</span>\n            </label>\n            <label class=\"flex items-center p-2 border border-gray-300 rounded-lg cursor-pointer hover:bg-level2/10 transition-colors flex-1\">\n              <input type=\"radio\" name=\"word-level\" value=\"L2\" class=\"mr-2 text-level2\">\n              <span>L2 初级</span>\n            </label>\n            <label class=\"flex items-center p-2 border border-gray-300 rounded-lg cursor-pointer hover:bg-level3/10 transition-colors flex-1\">\n              <input type=\"radio\" name=\"word-level\" value=\"L3\" class=\"mr-2 text-level3\">\n              <span>L3 中级</span>\n            </label>\n            <label class=\"flex items-center p-2 border border-gray-300 rounded-lg cursor-pointer hover:bg-level4/10 transition-colors flex-1\">\n              <input type=\"radio\" name=\"word-level\" value=\"L4\" class=\"mr-2 text-level4\">\n              <span>L4 高级</span>\n            </label>\n          </div>\n        </div>\n        \n        <!-- 文件上传区域 -->\n        <div class=\"mb-4\">\n          <label class=\"block text-sm font-medium text-gray-700 mb-1\">上传文本文档 <span class=\"text-red-500\">*</span></label>\n          <p class=\"text-xs text-gray-500 mb-2\">请上传TXT文件，按\"英文+音标+中文翻译\"格式排列，每行一个内容</p>\n          \n          <div id=\"file-upload-area\" class=\"file-upload-area\">\n            <input type=\"file\" id=\"custom-word-file\" class=\"hidden\" accept=\".txt\">\n            <div class=\"file-upload-icon\">\n              <i class=\"fa fa-file-text-o\"></i>\n            </div>\n            <h4 class=\"font-medium\">点击或拖拽文件到此处上传</h4>\n            <p class=\"text-sm text-gray-500 mt-1\">支持 .txt 格式文件</p>\n          </div>\n          \n          <div id=\"file-info\" class=\"file-info\">\n            <div class=\"flex justify-between items-center\">\n              <span id=\"file-name\" class=\"truncate\"></span>\n              <button type=\"button\" id=\"remove-file\" class=\"text-red-500 hover:text-red-700 text-sm\">\n                <i class=\"fa fa-times\"></i>\n              </button>\n            </div>\n            <div class=\"upload-progress\">\n              <div id=\"upload-progress-bar\" class=\"upload-progress-bar\"></div>\n            </div>\n          </div>\n          \n          <div id=\"upload-results\" class=\"upload-results\">\n            <!-- 上传结果将在这里显示 -->\n          </div>\n          \n          <div id=\"file-error\" class=\"mt-1 text-red-500 text-xs hidden\">请上传有效的TXT文件</div>\n        </div>\n        \n        <div class=\"mb-4\">\n          <label class=\"block text-sm font-medium text-gray-700 mb-1\">文件格式说明</label>\n          <div class=\"bg-gray-50 p-3 rounded-lg text-xs text-gray-600\">\n            <p>请按以下格式准备TXT文件：</p>\n            <p>1. 英文内容（第一行）</p>\n            <p>2. 对应的音标（第二行）</p>\n            <p>3. 中文翻译（第三行）</p>\n            <p>4. 英文内容（第四行）</p>\n            <p>5. 对应的音标（第五行）</p>\n            <p>6. 中文翻译（第六行）</p>\n            <p>依此类推...</p>\n            <p class=\"mt-2 font-medium\">各级别建议内容：</p>\n            <p>- L1（基础）：单音节词，如cat, dog, apple</p>\n            <p>- L2（初级）：双音节词，如teacher, happy</p>\n            <p>- L3（中级）：多音节词和简单短语</p>\n            <p>- L4（高级）：复杂词汇和完整句子</p>\n          </div>\n        </div>\n        \n        <div class=\"flex gap-2\">\n          <button type=\"submit\" id=\"submit-word-btn\" class=\"flex-1 py-3 bg-primary text-white rounded-lg shadow-sm hover:bg-primary/90 transition-colors flex items-center justify-center\" disabled>\n            <i class=\"fa fa-plus mr-2\"></i> 添加内容\n          </button>\n          <button type=\"button\" id=\"manage-words-btn\" class=\"flex-1 py-3 bg-gray-100 text-gray-700 rounded-lg shadow-sm hover:bg-gray-200 transition-colors flex items-center justify-center\">\n            <i class=\"fa fa-list mr-2\"></i> 管理内容\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n\n  <!-- 自定义单词管理模态框 -->\n  <div id=\"manage-words-modal\" class=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 hidden fade-in\">\n    <div class=\"bg-white rounded-2xl p-6 max-w-lg w-full mx-4 max-h-[80vh] overflow-hidden flex flex-col\">\n      <div class=\"flex justify-between items-center mb-4\">\n        <h3 class=\"text-xl font-bold text-gray-800\">管理自定义内容</h3>\n        <div class=\"flex items-center gap-2\">\n          <button id=\"batch-delete-btn\" class=\"px-3 py-1.5 bg-red-500 text-white rounded-lg text-sm shadow-sm hover:bg-red-600 transition-colors flex items-center\" disabled>\n            <i class=\"fa fa-trash mr-1\"></i> 批量删除\n          </button>\n          <button id=\"close-manage-modal\" class=\"text-gray-500 hover:text-gray-700\">\n            <i class=\"fa fa-times text-xl\"></i>\n          </button>\n        </div>\n      </div>\n      \n      <div class=\"mb-4\">\n        <div class=\"relative\">\n          <input type=\"text\" id=\"word-search\" class=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors\" placeholder=\"搜索内容...\">\n          <i class=\"fa fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"></i>\n        </div>\n      </div>\n      \n      <div id=\"custom-words-list\" class=\"flex-1 overflow-y-auto hide-scrollbar bg-gray-50 rounded-lg p-2\">\n        <!-- 自定义内容列表将通过JS动态生成 -->\n        <div class=\"text-center text-gray-500 py-10\">暂无自定义内容</div>\n      </div>\n      \n      <div class=\"mt-4 text-sm text-gray-500 flex justify-between\">\n        <span id=\"words-count\">共 0 个自定义内容</span>\n        <span id=\"selected-count\">已选择 0 个</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- 删除确认模态框 -->\n  <div id=\"delete-confirm-modal\" class=\"fixed inset-0 bg-black/50 flex items-center justify-center z-60 hidden fade-in\">\n    <div class=\"bg-white rounded-2xl p-6 max-w-md w-full mx-4\">\n      <div class=\"text-center mb-4\">\n        <div class=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-red-100 text-red-500 mb-4\">\n          <i class=\"fa fa-exclamation-triangle text-2xl\"></i>\n        </div>\n        <h3 class=\"text-xl font-bold text-gray-800 mb-2\">确认删除</h3>\n        <p class=\"text-gray-600\" id=\"delete-confirm-message\">您确定要删除这个内容吗？此操作无法撤销。</p>\n      </div>\n      \n      <div class=\"flex gap-3\">\n        <button id=\"cancel-delete-btn\" class=\"flex-1 py-3 bg-gray-100 text-gray-700 rounded-lg shadow-sm hover:bg-gray-200 transition-colors\">\n          取消\n        </button>\n        <button id=\"confirm-delete-btn\" class=\"flex-1 py-3 bg-red-500 text-white rounded-lg shadow-sm hover:bg-red-600 transition-colors\">\n          确认删除\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <!-- JavaScript -->\n  <script>\n    // 初始化空的单词库，按级别分类存储 - 增加了L2、L3、L4\n    const words = {\n      default: [],  // 默认级别\n      L1: [],        // L1级别\n      L2: [],        // L2级别\n      L3: [],        // L3级别\n      L4: []         // L4级别\n    };\n    // 当前激活的级别筛选（默认显示全部）\n    let activeLevel = 'all';\n    // 获取当前筛选后的单词列表\n    function getFilteredWords() {\n      if (activeLevel === 'all') {\n        // 合并所有级别的单词，并保持原有顺序\n        return [...words.default, ...words.L1, ...words.L2, ...words.L3, ...words.L4];\n      }\n      return [...words[activeLevel]];\n    }\n    \n    // 判断内容ID是否属于当前激活的级别\n    function isInActiveLevel(wordId) {\n      // 全部内容模式下，所有内容都被视为\"当前章节\"\n      if (activeLevel === 'all') return true;\n      \n      // 检查该ID是否属于当前激活的级别\n      return words[activeLevel].some(word => word.id === wordId);\n    }\n    \n    // 存储选中的内容ID\n    const selectedWordIds = new Set();\n\n    let currentWordIndex = 0;\n    let currentWord = '';\n    let userInput = '';\n    let speechEnabled = true; // 朗读功能开关\n    let soundEffectsEnabled = true; // 音效开关\n    let speechVolume = 120; // 朗读音量 0-150，默认值120\n    let effectVolume = 80; // 音效音量 0-100\n    let phoneticVisible = true; // 音标显示状态\n    let translationVisible = true; // 中文翻译显示状态\n    // 存储待删除的内容ID\n    let wordToDelete = null;\n    // 存储上传的文件内容\n    let uploadedWords = [];\n    // 跟踪每个位置的连续错误次数\n    let consecutiveErrors = {};\n\n    // 创建音频上下文和音效缓冲区\n    let audioContext;\n    let keyPressBuffer;\n    let correctBuffer;\n    let errorBuffer;\n    let effectGainNode; // 音效音量控制节点\n\n    // DOM元素\n    const letterUnderscores = document.getElementById('letter-underscores');\n    const letterUnderscoresContainer = document.getElementById('letter-underscores-container');\n    const emptyStateMessage = document.getElementById('empty-state-message');\n    const keyboard = document.getElementById('keyboard');\n    const keyboardContainer = document.getElementById('keyboard-container');\n    const errorMessage = document.getElementById('error-message');\n    const letterCount = document.getElementById('letter-count');\n    const progressText = document.getElementById('progress-text');\n    const progressBar = document.getElementById('progress-bar');\n    const playSoundBtn = document.getElementById('play-sound');\n    const audioControlBtn = document.getElementById('audio-control-btn');\n    const audioControlPanel = document.getElementById('audio-control-panel');\n    const speechVolumeSlider = document.getElementById('speech-volume-slider');\n    const speechVolumeValue = document.getElementById('speech-volume-value');\n    const effectVolumeSlider = document.getElementById('effect-volume-slider');\n    const effectVolumeValue = document.getElementById('effect-volume-value');\n    const enableSpeechCheckbox = document.getElementById('enable-speech');\n    const enableSoundEffectsCheckbox = document.getElementById('enable-sound-effects');\n    const prevWordBtn = document.getElementById('prev-word');\n    const nextWordBtn = document.getElementById('next-word');\n    const customDictBtn = document.getElementById('custom-dict-btn');\n    const customDictModal = document.getElementById('custom-dict-modal');\n    const closeModalBtn = document.getElementById('close-modal');\n    const customWordForm = document.getElementById('custom-word-form');\n    const fileError = document.getElementById('file-error');\n    const editWordId = document.getElementById('edit-word-id');\n    const submitWordBtn = document.getElementById('submit-word-btn');\n    const manageWordsBtn = document.getElementById('manage-words-btn');\n    const manageWordsModal = document.getElementById('manage-words-modal');\n    const closeManageModalBtn = document.getElementById('close-manage-modal');\n    const customWordsList = document.getElementById('custom-words-list');\n    const wordsCount = document.getElementById('words-count');\n    const wordSearch = document.getElementById('word-search');\n    const batchDeleteBtn = document.getElementById('batch-delete-btn');\n    const selectedCount = document.getElementById('selected-count');\n    const deleteConfirmModal = document.getElementById('delete-confirm-modal');\n    const cancelDeleteBtn = document.getElementById('cancel-delete-btn');\n    const confirmDeleteBtn = document.getElementById('confirm-delete-btn');\n    const deleteConfirmMessage = document.getElementById('delete-confirm-message');\n    // 图片相关元素\n    const wordImage = document.getElementById('word-image');\n    const defaultWordIcon = document.getElementById('default-word-icon');\n    // 音标和翻译相关元素\n    const phoneticDisplay = document.getElementById('phonetic-display');\n    const phoneticText = phoneticDisplay.querySelector('.phonetic-text');\n    const phoneticToggle = document.getElementById('phonetic-toggle');\n    const translationDisplay = document.getElementById('translation-display');\n    const translationText = translationDisplay.querySelector('.translation-text');\n    const translationToggle = document.getElementById('translation-toggle');\n    // 级别相关元素 - 增加了L2、L3、L4\n    const allLevelsTab = document.getElementById('all-levels-tab');\n    const level1Tab = document.getElementById('level1-tab');\n    const level2Tab = document.getElementById('level2-tab');\n    const level3Tab = document.getElementById('level3-tab');\n    const level4Tab = document.getElementById('level4-tab');\n    // 文件上传相关元素\n    let fileUploadArea, customWordFile, fileName, fileInfo, removeFileBtn;\n    const uploadProgress = document.querySelector('.upload-progress');\n    const uploadProgressBar = document.getElementById('upload-progress-bar');\n    const uploadResults = document.getElementById('upload-results');\n\n    // 更新级别标签的可点击状态\n    function updateLevelTabStates() {\n      // 检查每个级别的内容数量\n      const level1HasContent = words.L1.length > 0;\n      const level2HasContent = words.L2.length > 0;\n      const level3HasContent = words.L3.length > 0;\n      const level4HasContent = words.L4.length > 0;\n      \n      // 更新L1标签状态\n      if (level1HasContent) {\n        level1Tab.classList.remove('opacity-50', 'cursor-not-allowed');\n        level1Tab.removeAttribute('disabled');\n      } else {\n        level1Tab.classList.add('opacity-50', 'cursor-not-allowed');\n        level1Tab.setAttribute('disabled', 'true');\n      }\n      \n      // 更新L2标签状态\n      if (level2HasContent) {\n        level2Tab.classList.remove('opacity-50', 'cursor-not-allowed');\n        level2Tab.removeAttribute('disabled');\n      } else {\n        level2Tab.classList.add('opacity-50', 'cursor-not-allowed');\n        level2Tab.setAttribute('disabled', 'true');\n      }\n      \n      // 更新L3标签状态\n      if (level3HasContent) {\n        level3Tab.classList.remove('opacity-50', 'cursor-not-allowed');\n        level3Tab.removeAttribute('disabled');\n      } else {\n        level3Tab.classList.add('opacity-50', 'cursor-not-allowed');\n        level3Tab.setAttribute('disabled', 'true');\n      }\n      \n      // 更新L4标签状态\n      if (level4HasContent) {\n        level4Tab.classList.remove('opacity-50', 'cursor-not-allowed');\n        level4Tab.removeAttribute('disabled');\n      } else {\n        level4Tab.classList.add('opacity-50', 'cursor-not-allowed');\n        level4Tab.setAttribute('disabled', 'true');\n      }\n    }\n\n    // 加载自定义内容（按级别）\n    function loadCustomWords() {\n      const savedWords = localStorage.getItem('customWords');\n      if (savedWords) {\n        try {\n          const parsed = JSON.parse(savedWords);\n          \n          // 清空现有数据\n          words.default.length = 0;\n          words.L1.length = 0;\n          words.L2.length = 0;\n          words.L3.length = 0;\n          words.L4.length = 0;\n          \n          // 按级别分类添加\n          parsed.forEach(item => {\n            // 确保每个内容都有唯一ID和必要属性\n            if (!item.id) {\n              item.id = 'custom-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n            }\n            // 确保级别属性存在，默认为default\n            if (!item.level) {\n              item.level = 'default';\n            }\n            // 确保其他属性存在\n            if (!item.imageUrl) item.imageUrl = '';\n            if (!item.phonetic) item.phonetic = '';\n            if (!item.translation) item.translation = '';\n            \n            // 添加到对应级别的数组\n            if (words[item.level]) {\n              words[item.level].push(item);\n            } else {\n              words.default.push(item);\n            }\n          });\n        } catch (e) {\n          console.error('Error loading custom items:', e);\n        }\n      }\n    }\n\n    // 保存自定义内容（按级别）\n    function saveCustomWords() {\n      // 合并所有级别的单词\n      const allWords = [...words.default, ...words.L1, ...words.L2, ...words.L3, ...words.L4];\n      localStorage.setItem('customWords', JSON.stringify(allWords));\n      updateCustomWordsList();\n      updateEmptyState();\n      updateLevelTabStates(); // 更新级别标签状态\n    }\n    \n    // 更新空状态显示\n    function updateEmptyState() {\n      const filteredWords = getFilteredWords();\n      const hasWords = filteredWords.length > 0;\n      \n      // 显示或隐藏空状态信息\n      emptyStateMessage.classList.toggle('hidden', hasWords);\n      \n      // 显示或隐藏学习元素\n      playSoundBtn.classList.toggle('hidden', !hasWords);\n      keyboardContainer.classList.toggle('hidden', !hasWords);\n      phoneticDisplay.classList.toggle('hidden', !hasWords || !phoneticVisible);\n      translationDisplay.classList.toggle('hidden', !hasWords || !translationVisible);\n      \n      // 启用或禁用导航按钮\n      prevWordBtn.disabled = !hasWords || currentWordIndex === 0;\n      nextWordBtn.disabled = !hasWords || currentWordIndex === filteredWords.length - 1;\n      \n      // 更新进度\n      if (hasWords) {\n        progressText.textContent = `${currentWordIndex + 1}/${filteredWords.length}`;\n        progressBar.style.width = `${((currentWordIndex + 1) / filteredWords.length) * 100}%`;\n      } else {\n        progressText.textContent = `0/0`;\n        progressBar.style.width = `0%`;\n      }\n    }\n    \n    // 更新选中计数和批量删除按钮状态\n    function updateSelectionState() {\n      const count = selectedWordIds.size;\n      selectedCount.textContent = `已选择 ${count} 个`;\n      batchDeleteBtn.disabled = count === 0;\n      \n      // 更改批量删除按钮文本\n      if (count === 1) {\n        batchDeleteBtn.innerHTML = '<i class=\"fa fa-trash mr-1\"></i> 删除所选';\n      } else if (count > 1) {\n        batchDeleteBtn.innerHTML = `<i class=\"fa fa-trash mr-1\"></i> 删除 ${count} 项`;\n      }\n    }\n    \n    // 切换内容选择状态\n    function toggleWordSelection(wordId, element) {\n      if (selectedWordIds.has(wordId)) {\n        selectedWordIds.delete(wordId);\n        element.classList.remove('word-item-selected');\n      } else {\n        selectedWordIds.add(wordId);\n        element.classList.add('word-item-selected');\n      }\n      updateSelectionState();\n    }\n    \n    // 清除所有选择\n    function clearAllSelections() {\n      selectedWordIds.clear();\n      document.querySelectorAll('.word-item-selected').forEach(el => {\n        el.classList.remove('word-item-selected');\n      });\n      updateSelectionState();\n    }\n    \n    // 显示删除确认对话框\n    function showDeleteConfirmDialog(wordId, isBatch = false) {\n      wordToDelete = wordId;\n      \n      if (isBatch) {\n        deleteConfirmMessage.textContent = `您确定要删除选中的 ${selectedWordIds.size} 个内容吗？此操作无法撤销。`;\n      } else {\n        // 查找单词所在的级别\n        let wordItem = null;\n        for (const level in words) {\n          wordItem = words[level].find(w => w.id === wordId);\n          if (wordItem) break;\n        }\n        deleteConfirmMessage.textContent = `您确定要删除\"${wordItem?.word || '这个内容'}\"吗？此操作无法撤销。`;\n      }\n      \n      deleteConfirmModal.classList.remove('hidden');\n      document.body.style.overflow = 'hidden';\n    }\n    \n    // 关闭删除确认对话框\n    function closeDeleteConfirmDialog() {\n      deleteConfirmModal.classList.add('hidden');\n      document.body.style.overflow = 'auto';\n      wordToDelete = null;\n    }\n    \n    // 执行删除操作\n    function performDelete() {\n      if (wordToDelete === null) return;\n      \n      // 批量删除\n      if (Array.isArray(wordToDelete)) {\n        // 获取当前激活级别的内容ID\n        const activeLevelWords = activeLevel === 'all' ? getFilteredWords() : words[activeLevel];\n        const activeLevelWordIds = new Set(activeLevelWords.map(word => word.id));\n        \n        // 计算当前激活级别在删除后会剩下多少内容\n        let remainingActiveCount = activeLevelWordIds.size;\n        wordToDelete.forEach(id => {\n          if (activeLevelWordIds.has(id)) {\n            remainingActiveCount--;\n          }\n        });\n        \n        // 如果删除后当前激活级别会没有内容，调整删除列表\n        if (remainingActiveCount === 0 && activeLevelWordIds.size > 0) {\n          // 找出属于当前激活级别的内容ID\n          const activeToDelete = wordToDelete.filter(id => activeLevelWordIds.has(id));\n          \n          // 如果有属于当前激活级别的内容，保留一个\n          if (activeToDelete.length > 0) {\n            // 从删除列表中移除最后一个属于当前激活级别的内容\n            const idToKeep = activeToDelete.pop();\n            wordToDelete = wordToDelete.filter(id => id !== idToKeep);\n            \n            showNotification(`当前章节至少需要保留1个内容，已为您保留1个`, 'info');\n          }\n        }\n        \n        wordToDelete.forEach(id => deleteWordById(id));\n      } \n      // 单个删除\n      else {\n        deleteWordById(wordToDelete);\n      }\n      \n      closeDeleteConfirmDialog();\n      clearAllSelections();\n      saveCustomWords();\n      updateLevelTabStates(); // 更新级别标签状态\n      showNotification('内容已成功删除', 'success');\n    }\n    \n    // 根据ID删除内容\n    function deleteWordById(wordId) {\n      // 查找单词所在的级别和索引\n      for (const level in words) {\n        const index = words[level].findIndex(w => w.id === wordId);\n        if (index !== -1) {\n          words[level].splice(index, 1);\n          break;\n        }\n      }\n      \n      // 更新当前显示\n      const filteredWords = getFilteredWords();\n      // 处理当前索引\n      if (currentWordIndex >= filteredWords.length) {\n        currentWordIndex = Math.max(0, filteredWords.length - 1);\n      }\n      setCurrentWord(currentWordIndex);\n    }\n    \n    // 更新自定义内容列表\n    function updateCustomWordsList() {\n      const searchTerm = wordSearch.value.toLowerCase().trim();\n      // 获取所有级别的单词\n      const allWords = [...words.default, ...words.L1, ...words.L2, ...words.L3, ...words.L4];\n      const filteredWords = allWords.filter(item => \n        searchTerm === '' || item.word.toLowerCase().includes(searchTerm) ||\n        item.phonetic.toLowerCase().includes(searchTerm) ||\n        item.translation.toLowerCase().includes(searchTerm)\n      );\n      \n      customWordsList.innerHTML = '';\n      \n      if (filteredWords.length === 0) {\n        customWordsList.innerHTML = '<div class=\"text-center text-gray-500 py-10\">暂无自定义内容</div>';\n      } else {\n        filteredWords.forEach(item => {\n          const wordItem = document.createElement('div');\n          wordItem.className = 'bg-white rounded-lg p-3 mb-2 shadow-sm hover:shadow-md transition-shadow flex items-center justify-between cursor-pointer';\n          wordItem.dataset.id = item.id;\n          \n          // 添加级别标识\n          if (item.level === 'L1') {\n            wordItem.innerHTML += `<span class=\"absolute left-2 top-2 bg-level1 text-white text-xs px-1.5 py-0.5 rounded\">L1</span>`;\n            wordItem.classList.add('relative', 'pl-8');\n          } else if (item.level === 'L2') {\n            wordItem.innerHTML += `<span class=\"absolute left-2 top-2 bg-level2 text-white text-xs px-1.5 py-0.5 rounded\">L2</span>`;\n            wordItem.classList.add('relative', 'pl-8');\n          } else if (item.level === 'L3') {\n            wordItem.innerHTML += `<span class=\"absolute left-2 top-2 bg-level3 text-white text-xs px-1.5 py-0.5 rounded\">L3</span>`;\n            wordItem.classList.add('relative', 'pl-8');\n          } else if (item.level === 'L4') {\n            wordItem.innerHTML += `<span class=\"absolute left-2 top-2 bg-level4 text-white text-xs px-1.5 py-0.5 rounded\">L4</span>`;\n            wordItem.classList.add('relative', 'pl-8');\n          }\n          \n          // 检查是否被选中\n          if (selectedWordIds.has(item.id)) {\n            wordItem.classList.add('word-item-selected');\n          }\n          \n          // 点击项切换选择状态\n          wordItem.addEventListener('click', (e) => {\n            // 如果点击的是操作按钮，则不切换选择状态\n            if (!e.target.closest('.actions')) {\n              toggleWordSelection(item.id, wordItem);\n            }\n          });\n          \n          const wordInfo = document.createElement('div');\n          wordInfo.className = 'flex items-center gap-3';\n          \n          const wordIcon = document.createElement('div');\n          // 如果有图片，显示缩略图，否则显示默认图标\n          if (item.imageUrl) {\n            wordIcon.className = 'w-12 h-12 rounded overflow-hidden';\n            wordIcon.innerHTML = `<img src=\"${item.imageUrl}\" alt=\"${item.word}\" class=\"w-full h-full object-cover\">`;\n          } else {\n            wordIcon.className = 'w-12 h-12 rounded bg-primary/10 flex items-center justify-center';\n            wordIcon.innerHTML = '<i class=\"fa fa-font text-primary\"></i>';\n          }\n          \n          const wordDetails = document.createElement('div');\n          wordDetails.className = 'flex flex-col';\n          \n          const wordText = document.createElement('div');\n          wordText.className = 'font-medium';\n          wordText.textContent = item.word;\n          \n          // 显示音标\n          const phoneticTextEl = document.createElement('div');\n          phoneticTextEl.className = 'text-xs text-gray-500 italic';\n          phoneticTextEl.textContent = item.phonetic || '';\n          \n          // 显示翻译\n          const translationTextEl = document.createElement('div');\n          translationTextEl.className = 'text-xs text-gray-600';\n          translationTextEl.textContent = item.translation || '';\n          \n          wordDetails.appendChild(wordText);\n          wordDetails.appendChild(phoneticTextEl);\n          wordDetails.appendChild(translationTextEl);\n          wordInfo.appendChild(wordIcon);\n          wordInfo.appendChild(wordDetails);\n          \n          const actions = document.createElement('div');\n          actions.className = 'actions flex gap-2';\n          \n          // 删除按钮\n          const deleteBtn = document.createElement('button');\n          deleteBtn.className = 'delete-btn';\n          deleteBtn.title = '删除';\n          deleteBtn.innerHTML = '<i class=\"fa fa-trash\"></i>';\n          \n          deleteBtn.addEventListener('click', (e) => {\n            e.stopPropagation();\n            \n            // 检查该内容是否属于当前激活级别\n            if (isInActiveLevel(item.id)) {\n              // 获取当前激活级别的内容\n              const activeLevelWords = activeLevel === 'all' ? getFilteredWords() : words[activeLevel];\n              \n              // 如果当前激活级别只有这一个内容，阻止删除\n              if (activeLevelWords.length === 1 && activeLevelWords[0].id === item.id) {\n                showNotification('当前章节至少需要保留1个内容', 'error');\n                return;\n              }\n            }\n            \n            showDeleteConfirmDialog(item.id);\n          });\n          \n          actions.appendChild(deleteBtn);\n          \n          wordItem.appendChild(wordInfo);\n          wordItem.appendChild(actions);\n          \n          customWordsList.appendChild(wordItem);\n        });\n      }\n      \n      wordsCount.textContent = `共 ${allWords.length} 个自定义内容`;\n      updateSelectionState();\n    }\n    \n    // 重置文件上传区域\n    function resetFileUpload() {\n      // 确保元素引用有效\n      if (customWordFile) {\n        customWordFile.value = '';\n      }\n      \n      if (fileInfo) {\n        fileInfo.classList.remove('active');\n      }\n      \n      if (uploadProgress) {\n        uploadProgress.classList.remove('active');\n      }\n      \n      if (uploadResults) {\n        uploadResults.classList.remove('active');\n        uploadResults.innerHTML = '';\n      }\n      \n      if (fileError) {\n        fileError.classList.add('hidden');\n      }\n      \n      uploadedWords = [];\n      submitWordBtn.disabled = true;\n      \n      // 恢复文件上传区域原始HTML\n      const fileUploadContainer = document.querySelector('#file-upload-area').parentNode;\n      fileUploadContainer.innerHTML = `\n        <label class=\"block text-sm font-medium text-gray-700 mb-1\">上传文本文档 <span class=\"text-red-500\">*</span></label>\n        <p class=\"text-xs text-gray-500 mb-2\">请上传TXT文件，按\"英文+音标+中文翻译\"格式排列，每行一个内容</p>\n        \n        <div id=\"file-upload-area\" class=\"file-upload-area\">\n          <input type=\"file\" id=\"custom-word-file\" class=\"hidden\" accept=\".txt\">\n          <div class=\"file-upload-icon\">\n            <i class=\"fa fa-file-text-o\"></i>\n          </div>\n          <h4 class=\"font-medium\">点击或拖拽文件到此处上传</h4>\n          <p class=\"text-sm text-gray-500 mt-1\">支持 .txt 格式文件</p>\n        </div>\n        \n        <div id=\"file-info\" class=\"file-info\">\n          <div class=\"flex justify-between items-center\">\n            <span id=\"file-name\" class=\"truncate\"></span>\n            <button type=\"button\" id=\"remove-file\" class=\"text-red-500 hover:text-red-700 text-sm\">\n              <i class=\"fa fa-times\"></i>\n            </button>\n          </div>\n          <div class=\"upload-progress\">\n            <div id=\"upload-progress-bar\" class=\"upload-progress-bar\"></div>\n          </div>\n        </div>\n        \n        <div id=\"upload-results\" class=\"upload-results\">\n          <!-- 上传结果将在这里显示 -->\n        </div>\n        \n        <div id=\"file-error\" class=\"mt-1 text-red-500 text-xs hidden\">请上传有效的TXT文件</div>\n      `;\n      \n      // 重新获取DOM元素并绑定事件\n      initFileUploadEvents();\n    }\n    \n    // 初始化文件上传事件\n    function initFileUploadEvents() {\n      // 重新获取DOM元素引用\n      fileUploadArea = document.getElementById('file-upload-area');\n      customWordFile = document.getElementById('custom-word-file');\n      fileName = document.getElementById('file-name');\n      fileInfo = document.getElementById('file-info');\n      removeFileBtn = document.getElementById('remove-file');\n      \n      // 点击上传区域触发文件选择\n      fileUploadArea.addEventListener('click', () => {\n        customWordFile.click();\n      });\n      \n      // 处理文件选择\n      customWordFile.addEventListener('change', (e) => {\n        if (e.target.files && e.target.files[0]) {\n          handleFileUpload(e.target.files[0]);\n        }\n      });\n      \n      // 拖拽功能\n      fileUploadArea.addEventListener('dragover', (e) => {\n        e.preventDefault();\n        fileUploadArea.classList.add('border-primary', 'bg-primary/5');\n      });\n      \n      fileUploadArea.addEventListener('dragleave', () => {\n        fileUploadArea.classList.remove('border-primary', 'bg-primary/5');\n      });\n      \n      fileUploadArea.addEventListener('drop', (e) => {\n        e.preventDefault();\n        fileUploadArea.classList.remove('border-primary', 'bg-primary/5');\n        \n        if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n          handleFileUpload(e.dataTransfer.files[0]);\n        }\n      });\n      \n      // 移除文件\n      removeFileBtn.addEventListener('click', () => {\n        resetFileUpload();\n      });\n    }\n    \n    // 处理文件上传 - 按\"英文+音标+中文翻译\"格式解析\n    function handleFileUpload(file) {\n      // 验证文件类型\n      if (file.type !== 'text/plain' && !file.name.endsWith('.txt')) {\n        fileError.textContent = '请上传TXT格式的文本文件';\n        fileError.classList.remove('hidden');\n        return;\n      }\n      \n      // 显示文件信息\n      fileName.textContent = file.name;\n      fileInfo.classList.add('active');\n      uploadProgress.classList.add('active');\n      fileError.classList.add('hidden');\n      \n      // 读取文件内容\n      const reader = new FileReader();\n      \n      reader.onloadstart = () => {\n        uploadProgressBar.style.width = '10%';\n      };\n      \n      reader.onprogress = (e) => {\n        if (e.lengthComputable) {\n          const percent = Math.round((e.loaded / e.total) * 100);\n          uploadProgressBar.style.width = `${percent}%`;\n        }\n      };\n      \n      reader.onload = (e) => {\n        uploadProgressBar.style.width = '100%';\n        \n        // 解析文件内容，按行分割\n        const content = e.target.result;\n        const lines = content.split('\\n')\n          .map(line => line.trim())\n          .filter(line => line.length > 0);\n        \n        // 按\"英文+音标+中文翻译\"格式处理（3行一组）\n        uploadedWords = [];\n        for (let i = 0; i < lines.length; i += 3) {\n          const word = lines[i];\n          const phonetic = lines[i + 1] || '';\n          const translation = lines[i + 2] || '';\n          \n          uploadedWords.push({\n            word: word,\n            phonetic: phonetic,\n            translation: translation\n          });\n        }\n        \n        // 显示上传结果\n        setTimeout(() => {\n          uploadResults.classList.add('active');\n          uploadResults.innerHTML = `\n            <div class=\"result-item result-success\">\n              <i class=\"fa fa-check-circle mr-1\"></i> 成功解析 ${uploadedWords.length} 组内容\n            </div>\n          `;\n          \n          // 启用提交按钮\n          submitWordBtn.disabled = false;\n        }, 500);\n      };\n      \n      reader.onerror = () => {\n        fileError.textContent = '文件读取失败，请重试';\n        fileError.classList.remove('hidden');\n        uploadProgressBar.style.width = '0%';\n      };\n      \n      reader.readAsText(file);\n    }\n    \n    // 验证输入内容\n    function validateWordInput(input) {\n      // 移除前后空格\n      const trimmedInput = input.trim();\n      \n      // 检查是否为空\n      if (!trimmedInput) {\n        return false;\n      }\n      \n      // 允许字母、数字、空格和常见标点符号\n      if (!/^[a-zA-Z0-9\\s.,!?']+$/.test(trimmedInput)) {\n        return false;\n      }\n      \n      return trimmedInput; // 保留原始大小写\n    }\n    \n    // 获取单词音标\n    async function getWordPhonetic(word) {\n      try {\n        // 使用开源词典API获取音标\n        const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${encodeURIComponent(word)}`);\n        \n        if (!response.ok) {\n          return '';\n        }\n        \n        const data = await response.json();\n        \n        // 提取音标\n        if (data && data[0] && data[0].phonetics && data[0].phonetics.length > 0) {\n          // 优先使用带音频的音标\n          const phoneticWithAudio = data[0].phonetics.find(p => p.audio);\n          if (phoneticWithAudio && phoneticWithAudio.text) {\n            return phoneticWithAudio.text;\n          }\n          \n          // 否则使用第一个可用的音标\n          for (const phonetic of data[0].phonetics) {\n            if (phonetic.text) {\n              return phonetic.text;\n            }\n          }\n        }\n        \n        return '';\n      } catch (error) {\n        console.error('获取音标失败:', error);\n        return '';\n      }\n    }\n\n    // 播放发音\n    function speakWord(text) {\n      if (!speechEnabled) return;\n      \n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'en-US';\n      utterance.rate = 0.8; // 慢一点，适合儿童学习\n      // 限制音量最大值为1（API上限）\n      utterance.volume = Math.min(1, speechVolume / 100);\n      \n      speechSynthesis.speak(utterance);\n    }\n\n    // 打开模态框\n    function openModal() {\n      customDictModal.classList.remove('hidden');\n      // 防止背景滚动\n      document.body.style.overflow = 'hidden';\n    }\n\n    // 关闭模态框\n    function closeModal() {\n      customDictModal.classList.add('hidden');\n      // 恢复背景滚动\n      document.body.style.overflow = 'auto';\n      // 重置表单\n      resetFileUpload();\n      document.querySelector('#custom-dict-modal h3').textContent = '添加自定义内容';\n      submitWordBtn.innerHTML = '<i class=\"fa fa-plus mr-2\"></i> 添加内容';\n    }\n\n    // 初始化音频\n    function initAudio() {\n      try {\n        // 创建音频上下文\n        audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        \n        // 创建音效音量控制节点\n        effectGainNode = audioContext.createGain();\n        effectGainNode.connect(audioContext.destination);\n        setEffectVolume(effectVolume);\n        \n        // 预加载音效\n        loadSounds();\n      } catch (e) {\n        console.warn('Web Audio API不受支持:', e);\n      }\n    }\n\n    // 设置朗读音量\n    function setSpeechVolume(level) {\n      speechVolume = Math.max(0, Math.min(150, level));\n      speechVolumeSlider.value = speechVolume;\n      speechVolumeValue.textContent = `${speechVolume}%`;\n      \n      // 更新音量图标\n      updateAudioIcon();\n      \n      saveAudioSettings();\n    }\n\n    // 设置音效音量\n    function setEffectVolume(level) {\n      effectVolume = Math.max(0, Math.min(100, level));\n      if (effectGainNode) {\n        // 音频API使用0-1范围，使用平方曲线使音量变化更自然\n        const gainValue = Math.pow(effectVolume / 100, 2);\n        effectGainNode.gain.value = gainValue;\n      }\n      \n      effectVolumeSlider.value = effectVolume;\n      effectVolumeValue.textContent = `${effectVolume}%`;\n      \n      // 更新音量图标\n      updateAudioIcon();\n      \n      saveAudioSettings();\n    }\n\n    // 更新音频控制图标\n    function updateAudioIcon() {\n      const icon = audioControlBtn.querySelector('i');\n      \n      if (!speechEnabled && !soundEffectsEnabled) {\n        icon.className = 'fa fa-volume-off text-gray-400 transition-all duration-300';\n      } else if (speechVolume === 0 && effectVolume === 0) {\n        icon.className = 'fa fa-volume-off text-gray-400 transition-all duration-300';\n      } else if (speechVolume < 50 && effectVolume < 50) {\n        icon.className = 'fa fa-volume-down text-gray-600 transition-all duration-300';\n      } else {\n        icon.className = 'fa fa-volume-up text-primary transition-all duration-300';\n      }\n    }\n\n    // 加载音效\n    function loadSounds() {\n      // 创建按键音效（简单的正弦波音调）\n      keyPressBuffer = createTone(audioContext, 440, 0.05); // 440Hz, 50ms\n      \n      // 创建正确答案音效\n      correctBuffer = createTone(audioContext, 880, 0.2); // 880Hz, 200ms\n      \n      // 创建错误答案音效\n      errorBuffer = createTone(audioContext, 220, 0.2); // 220Hz, 200ms\n    }\n\n    // 创建简单的音调\n    function createTone(context, frequency, duration) {\n      const oscillator = context.createOscillator();\n      const sourceGain = context.createGain();\n      \n      oscillator.connect(sourceGain);\n      sourceGain.connect(effectGainNode); // 通过音效音量控制节点输出\n      \n      oscillator.type = 'sine';\n      oscillator.frequency.value = frequency;\n      \n      // 设置音量包络\n      sourceGain.gain.setValueAtTime(0, context.currentTime);\n      sourceGain.gain.linearRampToValueAtTime(0.3, context.currentTime + 0.01);\n      sourceGain.gain.exponentialRampToValueAtTime(0.01, context.currentTime + duration);\n      \n      // 创建音频缓冲区\n      const buffer = context.createBuffer(1, context.sampleRate * duration, context.sampleRate);\n      const data = buffer.getChannelData(0);\n      \n      for (let i = 0; i < buffer.length; i++) {\n        const t = i / context.sampleRate;\n        const amplitude = Math.exp(-t * 10); // 指数衰减\n        data[i] = Math.sin(2 * Math.PI * frequency * t) * amplitude * 0.3;\n      }\n      \n      return buffer;\n    }\n\n    // 播放音效\n    function playSound(buffer) {\n      if (!soundEffectsEnabled || !audioContext || !buffer) return;\n      \n      try {\n        // 恢复暂停的音频上下文（用户交互后）\n        if (audioContext.state === 'suspended') {\n          audioContext.resume();\n        }\n        \n        const source = audioContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(effectGainNode); // 通过音效音量控制节点输出\n        source.start();\n      } catch (e) {\n        console.warn('播放音效失败:', e);\n      }\n    }\n\n    // 播放按键音效\n    function playKeyPressSound() {\n      playSound(keyPressBuffer);\n    }\n\n    // 播放正确答案音效\n    function playCorrectSound() {\n      playSound(correctBuffer);\n    }\n\n    // 播放错误答案音效\n    function playErrorSound() {\n      playSound(errorBuffer);\n    }\n\n    // 生成字符下划线（支持句子中的空格）\n    function generateLetterUnderscores() {\n      letterUnderscores.innerHTML = '';\n      \n      for (let i = 0; i < currentWord.length; i++) {\n        const char = currentWord[i];\n        const underline = document.createElement('div');\n        \n        // 空格处理：使用一个更窄的下划线，并添加特殊类名以便定位\n        if (char === ' ') {\n          underline.className = 'space-underline w-4 h-12 md:w-6 md:h-14 flex items-center justify-center mx-1';\n          underline.innerHTML = '<div class=\"w-2 h-1 bg-gray-400 rounded-full\"></div>';\n        } else {\n          underline.className = 'letter-underline';\n          \n          if (i < userInput.length) {\n            underline.textContent = userInput[i];\n            underline.classList.add('letter-underline-filled');\n          }\n        }\n        \n        // 为每个下划线添加索引，用于定位错误字母\n        underline.dataset.index = i;\n        \n        letterUnderscores.appendChild(underline);\n      }\n    }\n\n    // 显示错误字母\n    function showErrorLetter(char, position) {\n      // 创建错误字母元素\n      const errorLetter = document.createElement('div');\n      errorLetter.className = 'error-letter';\n      errorLetter.textContent = char;\n      \n      // 获取对应位置的下划线元素\n      const underline = letterUnderscores.querySelector(`[data-index=\"${position}\"]`);\n      \n      if (underline) {\n        // 获取下划线位置\n        const rect = underline.getBoundingClientRect();\n        const containerRect = letterUnderscoresContainer.getBoundingClientRect();\n        \n        // 设置错误字母位置（在对应下划线正上方）\n        errorLetter.style.left = `${rect.left - containerRect.left + rect.width / 2}px`;\n        errorLetter.style.top = `${rect.top - containerRect.top - 20}px`;\n        errorLetter.style.transform = 'translateX(-50%)';\n        \n        // 添加到容器\n        letterUnderscoresContainer.appendChild(errorLetter);\n        \n        // 0.5秒后移除\n        setTimeout(() => {\n          letterUnderscoresContainer.removeChild(errorLetter);\n        }, 500);\n      }\n    }\n    \n    // 显示部分提示：当前字母及左右最近空格间的内容（1秒显示时间）\n    function showPartialHint(position) {\n      // 移除任何已存在的提示\n      const existingHints = document.querySelectorAll('.partial-hint');\n      existingHints.forEach(hint => hint.remove());\n      \n      // 查找左边最近的空格\n      let leftSpaceIndex = -1;\n      for (let i = position - 1; i >= 0; i--) {\n        if (currentWord[i] === ' ') {\n          leftSpaceIndex = i;\n          break;\n        }\n      }\n      \n      // 查找右边最近的空格\n      let rightSpaceIndex = currentWord.length;\n      for (let i = position + 1; i < currentWord.length; i++) {\n        if (currentWord[i] === ' ') {\n          rightSpaceIndex = i;\n          break;\n        }\n      }\n      \n      // 提取从左空格后一个字符到右空格前一个字符的内容\n      const startIndex = leftSpaceIndex + 1;\n      const endIndex = rightSpaceIndex;\n      const hintText = currentWord.substring(startIndex, endIndex);\n      \n      // 创建部分提示元素\n      const partialHint = document.createElement('div');\n      partialHint.className = 'partial-hint';\n      partialHint.textContent = hintText;\n      \n      // 获取对应位置的下划线元素\n      const underline = letterUnderscores.querySelector(`[data-index=\"${position}\"]`);\n      \n      if (underline) {\n        // 获取下划线位置\n        const rect = underline.getBoundingClientRect();\n        const containerRect = letterUnderscoresContainer.getBoundingClientRect();\n        \n        // 设置提示位置（在对应下划线正上方）\n        partialHint.style.left = `${rect.left - containerRect.left + rect.width / 2}px`;\n        partialHint.style.top = `${rect.top - containerRect.top - 40}px`;\n        partialHint.style.transform = 'translateX(-50%)';\n        \n        // 添加到容器\n        letterUnderscoresContainer.appendChild(partialHint);\n        \n        // 1秒后移除\n        setTimeout(() => {\n          if (partialHint.parentNode) {\n            letterUnderscoresContainer.removeChild(partialHint);\n          }\n        }, 1000);\n      }\n    }\n\n    // 生成虚拟键盘（增加空格键和数字、特殊符号支持）\n    function generateKeyboard() {\n      // 键盘布局 - QWERTY，增加空格键、数字和特殊符号\n      const keyboardLayout = [\n        ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n        ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n        ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', '.'],\n        ['Z', 'X', 'C', 'V', 'B', 'N', 'M', ' ', '!', '?']\n      ];\n      \n      keyboard.innerHTML = '';\n      \n      keyboardLayout.forEach(row => {\n        row.forEach(char => {\n          if (char) {\n            const key = document.createElement('div');\n            // 空格键更宽\n            if (char === ' ') {\n              key.className = 'keyboard-key col-span-2';\n              key.innerHTML = '<i class=\"fa fa-space-shuttle\"></i>';\n            } else {\n              key.className = 'keyboard-key';\n              key.textContent = char;\n            }\n            key.dataset.char = char;\n            \n            key.addEventListener('click', () => {\n              handleKeyPress(char);\n            });\n            \n            keyboard.appendChild(key);\n          } else {\n            // 空白区域\n            const empty = document.createElement('div');\n            keyboard.appendChild(empty);\n          }\n        });\n      });\n    }\n\n    // 解析句子中的单词（按空格分割）\n    function getWordsFromSentence(sentence) {\n      return sentence.split(/\\s+/).filter(word => word.length > 0);\n    }\n    \n    // 查找当前正在输入的单词范围\n    function getCurrentWordRange(inputLength) {\n      let startIndex = 0;\n      let endIndex = 0;\n      \n      // 查找当前输入位置所在的单词\n      for (let i = 0; i < currentWord.length; i++) {\n        if (currentWord[i] === ' ') {\n          if (inputLength <= i) {\n            endIndex = i;\n            break;\n          }\n          startIndex = i + 1;\n        }\n        // 如果是最后一个单词\n        if (i === currentWord.length - 1) {\n          endIndex = currentWord.length;\n        }\n      }\n      \n      return { start: startIndex, end: endIndex };\n    }\n\n    // 设置当前内容，更新音标和翻译显示\n    function setCurrentWord(index) {\n      // 切换内容时停止任何正在播放的语音\n      speechSynthesis.cancel();\n      \n      const filteredWords = getFilteredWords();\n      \n      // 处理数组为空的情况\n      if (filteredWords.length === 0) {\n        currentWordIndex = 0;\n        currentWord = '';\n        userInput = '';\n        // 重置连续错误计数\n        consecutiveErrors = {};\n        updateEmptyState();\n        return;\n      }\n      \n      // 确保索引在有效范围内\n      if (index < 0) index = 0;\n      if (index >= filteredWords.length) index = filteredWords.length - 1;\n      \n      currentWordIndex = index;\n      currentWord = filteredWords[currentWordIndex].word;\n      userInput = '';\n      // 重置连续错误计数\n      consecutiveErrors = {};\n      \n      // 更新中文翻译显示\n      const translation = filteredWords[currentWordIndex].translation || '';\n      translationText.textContent = translation;\n      \n      // 更新音标显示\n      const phonetic = filteredWords[currentWordIndex].phonetic || '';\n      phoneticText.textContent = phonetic;\n      \n      // 控制翻译区域显示/隐藏和动画\n      if (translation && translationVisible) {\n        translationDisplay.style.opacity = '0';\n        setTimeout(() => {\n          translationDisplay.style.opacity = '1';\n        }, 100);\n      } else {\n        translationDisplay.style.opacity = '0';\n      }\n      \n      // 控制音标区域显示/隐藏和动画\n      if (phonetic && phoneticVisible) {\n        phoneticDisplay.style.opacity = '0';\n        setTimeout(() => {\n          phoneticDisplay.style.opacity = '1';\n        }, 100);\n      } else {\n        phoneticDisplay.style.opacity = '0';\n      }\n      \n      // 更新图片显示\n      if (filteredWords[currentWordIndex].imageUrl) {\n        wordImage.src = filteredWords[currentWordIndex].imageUrl;\n        wordImage.classList.remove('hidden');\n        defaultWordIcon.classList.add('hidden');\n      } else {\n        wordImage.src = '';\n        wordImage.classList.add('hidden');\n        defaultWordIcon.classList.remove('hidden');\n      }\n      \n      // 更新UI\n      generateLetterUnderscores();\n      letterCount.textContent = `${currentWord.length}个字符`;\n      \n      // 更新进度\n      progressText.textContent = `${currentWordIndex + 1}/${filteredWords.length}`;\n      progressBar.style.width = `${((currentWordIndex + 1) / filteredWords.length) * 100}%`;\n      \n      // 隐藏错误信息\n      errorMessage.classList.add('hidden');\n      \n      // 确保在所有UI更新完成后播放发音\n      setTimeout(() => {\n        // 如果有自定义发音，优先使用自定义发音\n        if (filteredWords[currentWordIndex].pronunciation && speechEnabled) {\n          speakWord(filteredWords[currentWordIndex].pronunciation);\n        } \n        // 否则使用单词本身发音\n        else if (speechEnabled) {\n          speakWord(currentWord);\n        }\n      }, 100);\n      \n      // 更新导航按钮状态\n      prevWordBtn.disabled = currentWordIndex === 0;\n      nextWordBtn.disabled = currentWordIndex === filteredWords.length - 1;\n    }\n\n    // 切换级别标签 - 增加了L2、L3、L4的处理\n    function switchLevelTab(level) {\n      activeLevel = level;\n      \n      // 更新标签样式\n      allLevelsTab.classList.remove('level-tab-active');\n      level1Tab.classList.remove('level1-tab-active');\n      level2Tab.classList.remove('level2-tab-active');\n      level3Tab.classList.remove('level3-tab-active');\n      level4Tab.classList.remove('level4-tab-active');\n      \n      // 更新进度条颜色\n      progressBar.classList.remove('bg-primary', 'bg-level1', 'bg-level2', 'bg-level3', 'bg-level4');\n      \n      if (level === 'all') {\n        allLevelsTab.classList.add('level-tab-active');\n        progressBar.classList.add('bg-primary');\n      } else if (level === 'L1') {\n        level1Tab.classList.add('level1-tab-active');\n        progressBar.classList.add('bg-level1');\n      } else if (level === 'L2') {\n        level2Tab.classList.add('level2-tab-active');\n        progressBar.classList.add('bg-level2');\n      } else if (level === 'L3') {\n        level3Tab.classList.add('level3-tab-active');\n        progressBar.classList.add('bg-level3');\n      } else if (level === 'L4') {\n        level4Tab.classList.add('level4-tab-active');\n        progressBar.classList.add('bg-level4');\n      }\n      \n      // 重置当前索引并加载对应级别的内容\n      currentWordIndex = 0;\n      setCurrentWord(0);\n      \n      // 播放切换音效\n      playKeyPressSound();\n    }\n\n    // 禁用键盘\n    function disableKeyboard() {\n      const keys = keyboard.querySelectorAll('.keyboard-key');\n      keys.forEach(key => {\n        key.classList.add('opacity-50', 'cursor-not-allowed');\n        key.removeEventListener('click', () => {});\n      });\n    }\n\n    // 启用键盘\n    function enableKeyboard() {\n      const keys = keyboard.querySelectorAll('.keyboard-key');\n      keys.forEach(key => {\n        key.classList.remove('opacity-50', 'cursor-not-allowed');\n        const char = key.dataset.char;\n        key.addEventListener('click', () => {\n          handleKeyPress(char);\n        });\n      });\n    }\n\n    // 处理键盘按键（支持所有字符输入）\n    function handleKeyPress(char) {\n      // 播放按键音效\n      playKeyPressSound();\n      \n      // 如果用户输入长度已达到内容长度，不允许继续输入\n      if (userInput.length >= currentWord.length) return;\n      \n      // 添加按键动画\n      const key = keyboard.querySelector(`[data-char=\"${char}\"]`);\n      if (key) {\n        key.classList.add('key-press');\n        setTimeout(() => key.classList.remove('key-press'), 150);\n      }\n      \n      // 严格区分大小写的验证逻辑\n      const expectedChar = currentWord[userInput.length];\n      \n      if (char === expectedChar) {\n        // 字符正确，添加到用户输入\n        userInput += char;\n        \n        // 重置该位置的连续错误计数\n        consecutiveErrors[userInput.length - 1] = 0;\n        \n        // 更新字符下划线\n        generateLetterUnderscores();\n        \n        // 隐藏错误信息\n        errorMessage.classList.add('hidden');\n        \n        // 检查是否完成输入\n        if (userInput.length === currentWord.length) {\n          // 完整内容拼写正确，先停止任何正在播放的语音\n          speechSynthesis.cancel();\n          \n          // 播放成功音效\n          playCorrectSound();\n          \n          // 添加成功动画\n          const underscores = letterUnderscores.querySelectorAll('.letter-underline, .space-underline');\n          underscores.forEach(underscore => {\n            underscore.classList.add('bounce');\n          });\n          \n          // 禁用键盘\n          disableKeyboard();\n          \n          // 2秒后自动进入下一个内容\n          setTimeout(() => {\n            const filteredWords = getFilteredWords();\n            // 如果是最后一个单词，循环到第一个\n            const nextIndex = currentWordIndex === filteredWords.length - 1 ? 0 : currentWordIndex + 1;\n            setCurrentWord(nextIndex);\n            enableKeyboard();\n          }, 2000);\n        } else {\n          // 检查当前是否开始输入空格右侧的新单词\n          // 情况1: 当前输入的是空格，说明即将开始新单词\n          // 情况2: 下一个字符是空格，说明当前已完成一个单词\n          // 情况3: 刚输入的是空格后的第一个字符，说明开始了新单词\n          if (char === ' ' || currentWord[userInput.length] === ' ' || \n              (userInput.length > 0 && userInput[userInput.length - 1] === ' ')) {\n            \n            // 立即停止当前正在播放的音频\n            speechSynthesis.cancel();\n            \n            // 获取当前单词范围\n            const wordRange = getCurrentWordRange(userInput.length);\n            // 提取当前单词\n            const currentWordPart = currentWord.substring(wordRange.start, wordRange.end);\n            \n            // 播放当前单词\n            if (speechEnabled) {\n              speakWord(currentWordPart);\n            }\n          }\n        }\n      } else {\n        // 字符错误，播放错误音效\n        playErrorSound();\n        \n        // 更新连续错误计数\n        const currentPosition = userInput.length;\n        consecutiveErrors[currentPosition] = (consecutiveErrors[currentPosition] || 0) + 1;\n        \n        // 显示错误字母，在对应位置的正上方显示0.5秒\n        showErrorLetter(char, currentPosition);\n        \n        // 当错误超过5次时，显示当前字母及左右最近空格间的内容（1秒）\n        if (consecutiveErrors[currentPosition] >= 5) {\n          showPartialHint(currentPosition);\n          // 重置计数，避免重复显示\n          consecutiveErrors[currentPosition] = 0;\n        }\n        \n        // 显示错误信息\n        errorMessage.classList.remove('hidden');\n        \n        // 特殊处理：如果是空格位置输入错误，不清空前面内容\n        if (expectedChar !== ' ') {\n          // 只清除当前正在输入的单词部分，保留已完成的单词\n          if (userInput.length > 0) {\n            // 找到最后一个空格的位置\n            const lastSpaceIndex = userInput.lastIndexOf(' ');\n            \n            if (lastSpaceIndex > -1) {\n              // 如果有空格，保留到最后一个空格（包含空格）\n              userInput = userInput.substring(0, lastSpaceIndex + 1);\n            } else {\n              // 如果没有空格，清除所有输入\n              userInput = '';\n            }\n          }\n        }\n        // 空格位置输入错误时，不清除前面内容\n        \n        // 更新下划线显示\n        generateLetterUnderscores();\n        \n        // 输入错误时自动再次播放音频\n        setTimeout(() => {\n          if (speechEnabled) {\n            const filteredWords = getFilteredWords();\n            // 优先使用自定义发音，否则使用单词本身\n            if (filteredWords[currentWordIndex].pronunciation) {\n              speakWord(filteredWords[currentWordIndex].pronunciation);\n            } else {\n              // 只朗读当前需要输入的部分\n              const currentPart = currentWord.substring(userInput.length);\n              speakWord(currentPart);\n            }\n          }\n        }, 500); // 延迟500ms播放，让错误音效先播放完毕\n      }\n    }\n    \n    // 检查答案\n    function checkAnswer() {\n      // 已在handleKeyPress中处理\n    }\n\n    // 添加事件监听器 - 增加了L2、L3、L4的点击事件\n    function addEventListeners() {\n      // 初始化文件上传事件\n      initFileUploadEvents();\n      \n      // 级别标签点击事件\n      allLevelsTab.addEventListener('click', () => {\n        switchLevelTab('all');\n      });\n      \n      level1Tab.addEventListener('click', () => {\n        if (!level1Tab.hasAttribute('disabled')) {\n          switchLevelTab('L1');\n        }\n      });\n      \n      level2Tab.addEventListener('click', () => {\n        if (!level2Tab.hasAttribute('disabled')) {\n          switchLevelTab('L2');\n        }\n      });\n      \n      level3Tab.addEventListener('click', () => {\n        if (!level3Tab.hasAttribute('disabled')) {\n          switchLevelTab('L3');\n        }\n      });\n      \n      level4Tab.addEventListener('click', () => {\n        if (!level4Tab.hasAttribute('disabled')) {\n          switchLevelTab('L4');\n        }\n      });\n      \n      // 播放发音按钮\n      playSoundBtn.addEventListener('click', () => speakWord(currentWord));\n      \n      // 中文翻译显示开关\n      translationToggle.addEventListener('click', () => {\n        translationVisible = !translationVisible;\n        const icon = translationToggle.querySelector('i');\n        \n        if (translationVisible) {\n          icon.className = 'fa fa-language text-primary transition-all duration-300';\n          const filteredWords = getFilteredWords();\n          if (filteredWords.length > 0 && filteredWords[currentWordIndex].translation) {\n            translationDisplay.style.opacity = '1';\n          }\n        } else {\n          icon.className = 'fa fa-language text-gray-400 transition-all duration-300';\n          translationDisplay.style.opacity = '0';\n        }\n        \n        saveAudioSettings();\n        playKeyPressSound();\n      });\n      \n      // 音标显示开关\n      phoneticToggle.addEventListener('click', () => {\n        phoneticVisible = !phoneticVisible;\n        const icon = phoneticToggle.querySelector('i');\n        \n        if (phoneticVisible) {\n          icon.className = 'fa fa-volume-up text-primary transition-all duration-300';\n          const filteredWords = getFilteredWords();\n          if (filteredWords.length > 0 && filteredWords[currentWordIndex].phonetic) {\n            phoneticDisplay.style.opacity = '1';\n          }\n        } else {\n          icon.className = 'fa fa-volume-off text-gray-400 transition-all duration-300';\n          phoneticDisplay.style.opacity = '0';\n        }\n        \n        saveAudioSettings();\n        playKeyPressSound();\n      });\n      \n      // 音频控制按钮点击事件\n      audioControlBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        audioControlPanel.classList.toggle('active');\n        playKeyPressSound();\n      });\n      \n      // 点击页面其他地方关闭音频控制面板\n      document.addEventListener('click', (e) => {\n        if (!audioControlBtn.contains(e.target) && !audioControlPanel.contains(e.target)) {\n          audioControlPanel.classList.remove('active');\n        }\n      });\n      \n      // 朗读音量控制\n      speechVolumeSlider.addEventListener('input', (e) => {\n        setSpeechVolume(parseInt(e.target.value));\n      });\n      \n      // 音效音量控制\n      effectVolumeSlider.addEventListener('input', (e) => {\n        setEffectVolume(parseInt(e.target.value));\n      });\n      \n      // 朗读开关\n      enableSpeechCheckbox.addEventListener('change', (e) => {\n        speechEnabled = e.target.checked;\n        updateAudioIcon();\n        saveAudioSettings();\n        playKeyPressSound();\n      });\n      \n      // 音效开关\n      enableSoundEffectsCheckbox.addEventListener('change', (e) => {\n        soundEffectsEnabled = e.target.checked;\n        updateAudioIcon();\n        saveAudioSettings();\n        if (soundEffectsEnabled) {\n          playKeyPressSound();\n        }\n      });\n      \n      // 上一个内容\n      prevWordBtn.addEventListener('click', () => {\n        setCurrentWord(currentWordIndex - 1);\n        playKeyPressSound();\n      });\n      \n      // 下一个内容\n      nextWordBtn.addEventListener('click', () => {\n        setCurrentWord(currentWordIndex + 1);\n        playKeyPressSound();\n      });\n      \n      // 自定义内容按钮\n      customDictBtn.addEventListener('click', () => {\n        openModal();\n        playKeyPressSound();\n      });\n      \n      // 关闭模态框\n      closeModalBtn.addEventListener('click', () => {\n        closeModal();\n        playKeyPressSound();\n      });\n      \n      // 点击模态框背景关闭\n      customDictModal.addEventListener('click', (e) => {\n        if (e.target === customDictModal) {\n          closeModal();\n          playKeyPressSound();\n        }\n      });\n      \n      // 搜索内容\n      wordSearch.addEventListener('input', () => {\n        updateCustomWordsList();\n      });\n      \n      // 显示通知函数\n      function showNotification(message, type = 'info') {\n        const notification = document.createElement('div');\n        notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg transform transition-all duration-500 ease-in-out translate-y-[-100px] opacity-0 z-5000`;\n        \n        if (type === 'success') {\n          notification.classList.add('bg-green-50', 'text-green-800', 'border-l-4', 'border-green-400');\n        } else if (type === 'error') {\n          notification.classList.add('bg-red-50', 'text-red-800', 'border-l-4', 'border-red-400');\n        } else {\n          notification.classList.add('bg-blue-50', 'text-blue-800', 'border-l-4', 'border-blue-400');\n        }\n        \n        notification.textContent = message;\n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n          notification.classList.remove('translate-y-[-100px]', 'opacity-0');\n          notification.classList.add('translate-y-0', 'opacity-100');\n        }, 10);\n        \n        setTimeout(() => {\n          notification.classList.remove('translate-y-0', 'opacity-100');\n          notification.classList.add('translate-y-[-100px]', 'opacity-0');\n          \n          setTimeout(() => {\n            document.body.removeChild(notification);\n          }, 500);\n        }, 3000);\n      }\n      \n      // 管理内容按钮\n      manageWordsBtn.addEventListener('click', () => {\n        // 关闭添加内容模态框\n        customDictModal.classList.add('hidden');\n        // 打开管理内容模态框\n        manageWordsModal.classList.remove('hidden');\n        // 防止背景滚动\n        document.body.style.overflow = 'hidden';\n        // 更新内容列表\n        updateCustomWordsList();\n        // 播放按键音效\n        playKeyPressSound();\n      });\n      \n      // 关闭管理内容模态框\n      closeManageModalBtn.addEventListener('click', () => {\n        manageWordsModal.classList.add('hidden');\n        // 恢复背景滚动\n        document.body.style.overflow = 'auto';\n        // 播放按键音效\n        playKeyPressSound();\n      });\n      \n      // 点击管理内容模态框背景关闭\n      manageWordsModal.addEventListener('click', (e) => {\n        if (e.target === manageWordsModal) {\n          manageWordsModal.classList.add('hidden');\n          document.body.style.overflow = 'auto';\n          playKeyPressSound();\n        }\n      });\n      \n      // 批量删除按钮\n      batchDeleteBtn.addEventListener('click', () => {\n        if (selectedWordIds.size > 0) {\n          // 获取当前激活级别中的内容总数\n          const activeLevelWords = activeLevel === 'all' ? getFilteredWords() : words[activeLevel];\n          const activeLevelWordIds = new Set(activeLevelWords.map(word => word.id));\n          \n          // 计算选中的内容中有多少属于当前激活级别\n          let selectedActiveCount = 0;\n          selectedWordIds.forEach(id => {\n            if (activeLevelWordIds.has(id)) {\n              selectedActiveCount++;\n            }\n          });\n          \n          // 如果当前激活级别只剩下选中的这些内容，阻止删除\n          if (activeLevelWordIds.size > 0 && selectedActiveCount === activeLevelWordIds.size) {\n            showNotification('当前章节至少需要保留1个内容', 'error');\n            return;\n          }\n          \n          showDeleteConfirmDialog(Array.from(selectedWordIds), true);\n        }\n      });\n      \n      // 取消删除按钮\n      cancelDeleteBtn.addEventListener('click', closeDeleteConfirmDialog);\n      \n      // 确认删除按钮\n      confirmDeleteBtn.addEventListener('click', performDelete);\n      \n      // 表单提交处理\n      customWordForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        \n        if (uploadedWords.length === 0) {\n          fileError.textContent = '请先上传并解析文件';\n          fileError.classList.remove('hidden');\n          return;\n        }\n        \n        // 获取选中的级别\n        const selectedLevel = document.querySelector('input[name=\"word-level\"]:checked').value;\n        \n        // 生成新内容并添加到对应级别的单词库\n        const newWords = uploadedWords.map(item => ({\n          id: 'custom-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n          word: item.word,\n          phonetic: item.phonetic,\n          translation: item.translation,\n          imageUrl: '',\n          level: selectedLevel // 添加级别属性\n        }));\n        \n        words[selectedLevel].push(...newWords);\n        \n        // 保存并关闭模态框\n        saveCustomWords();\n        closeModal();\n        \n        // 显示成功通知\n        showNotification(`成功添加 ${newWords.length} 个内容到 ${selectedLevel} 级别`, 'success');\n        \n        // 如果当前激活的是该级别且是首次添加内容，自动加载第一个\n        const filteredWords = getFilteredWords();\n        if (newWords.length > 0 && filteredWords.length === newWords.length) {\n          setCurrentWord(0);\n        }\n      });\n      \n      // ESC键关闭模态框\n      document.addEventListener('keydown', (e) => {\n        e.stopPropagation();\n        \n        const filteredWords = getFilteredWords();\n        if (filteredWords.length === 0) return;\n        \n        // 允许所有可打印字符（包括数字和特殊符号）\n        if (e.key.length === 1 && e.key !== ' ') {\n          // 直接使用原始输入，严格区分大小写\n          handleKeyPress(e.key);\n        } else if (e.key === ' ') {\n          // 处理空格键\n          handleKeyPress(' ');\n        } else if (e.key === 'Backspace') {\n          // 处理退格键\n          if (userInput.length > 0) {\n            playKeyPressSound();\n            userInput = userInput.slice(0, -1);\n            generateLetterUnderscores();\n            errorMessage.classList.add('hidden');\n          }\n        } else if (e.key === 'ArrowLeft') {\n          // 左箭头切换到上一个单词\n          playKeyPressSound();\n          setCurrentWord(currentWordIndex - 1);\n        } else if (e.key === 'ArrowRight') {\n          // 右箭头切换到下一个单词\n          playKeyPressSound();\n          setCurrentWord(currentWordIndex + 1);\n        } else if (e.key === 'Enter') {\n          // 回车键播放单词发音\n          speakWord(currentWord);\n        }\n      });\n      \n      // 确保body能够接收焦点\n      document.body.setAttribute('tabindex', '-1');\n      document.body.focus();\n      \n      // 当页面点击时，重新聚焦到body以确保键盘事件能被捕获\n      document.addEventListener('click', () => {\n        document.body.focus({ preventScroll: true });\n      });\n      \n      // 窗口滚动时调整头部样式\n      window.addEventListener('scroll', () => {\n        const header = document.querySelector('header');\n        if (window.scrollY > 10) {\n          header.classList.add('py-2');\n          header.classList.remove('py-3');\n        } else {\n          header.classList.add('py-3');\n          header.classList.remove('py-2');\n        }\n      });\n    }\n\n    // 确保用户交互后才能播放音频\n    document.addEventListener('click', function initAudioOnInteraction() {\n      if (!audioContext) {\n        initAudio();\n      } else if (audioContext.state === 'suspended') {\n        audioContext.resume();\n      }\n      document.removeEventListener('click', initAudioOnInteraction);\n    }, { once: true });\n\n    // 保存音频设置\n    function saveAudioSettings() {\n      localStorage.setItem('speechEnabled', speechEnabled);\n      localStorage.setItem('soundEffectsEnabled', soundEffectsEnabled);\n      localStorage.setItem('speechVolume', speechVolume);\n      localStorage.setItem('effectVolume', effectVolume);\n      localStorage.setItem('phoneticVisible', phoneticVisible);\n      localStorage.setItem('translationVisible', translationVisible);\n    }\n\n    // 初始化应用\n    function initApp() {\n      // 从本地存储加载音频设置\n      const savedSpeechEnabled = localStorage.getItem('speechEnabled');\n      if (savedSpeechEnabled !== null) {\n        speechEnabled = savedSpeechEnabled === 'true';\n        enableSpeechCheckbox.checked = speechEnabled;\n      }\n      \n      const savedSoundEffects = localStorage.getItem('soundEffectsEnabled');\n      if (savedSoundEffects !== null) {\n        soundEffectsEnabled = savedSoundEffects === 'true';\n        enableSoundEffectsCheckbox.checked = soundEffectsEnabled;\n      }\n      \n      const savedSpeechVolume = localStorage.getItem('speechVolume');\n      if (savedSpeechVolume !== null) {\n        speechVolume = parseInt(savedSpeechVolume);\n      } else {\n        speechVolume = 120; // 默认朗读音量设置为120\n      }\n      speechVolumeSlider.value = speechVolume;\n      speechVolumeValue.textContent = `${speechVolume}%`;\n      \n      const savedEffectVolume = localStorage.getItem('effectVolume');\n      if (savedEffectVolume !== null) {\n        effectVolume = parseInt(savedEffectVolume);\n      } else {\n        effectVolume = 80;\n      }\n      effectVolumeSlider.value = effectVolume;\n      effectVolumeValue.textContent = `${effectVolume}%`;\n      \n      // 加载音标显示状态\n      const savedPhoneticVisible = localStorage.getItem('phoneticVisible');\n      if (savedPhoneticVisible !== null) {\n        phoneticVisible = savedPhoneticVisible === 'true';\n      } else {\n        phoneticVisible = true; // 默认显示音标\n      }\n      \n      // 加载翻译显示状态\n      const savedTranslationVisible = localStorage.getItem('translationVisible');\n      if (savedTranslationVisible !== null) {\n        translationVisible = savedTranslationVisible === 'true';\n      } else {\n        translationVisible = true; // 默认显示翻译\n      }\n      \n      // 更新音标图标\n      const phoneticIcon = phoneticToggle.querySelector('i');\n      if (phoneticVisible) {\n        phoneticIcon.className = 'fa fa-volume-up text-primary transition-all duration-300';\n      } else {\n        phoneticIcon.className = 'fa fa-volume-off text-gray-400 transition-all duration-300';\n      }\n      \n      // 更新翻译图标\n      const translationIcon = translationToggle.querySelector('i');\n      if (translationVisible) {\n        translationIcon.className = 'fa fa-language text-primary transition-all duration-300';\n      } else {\n        translationIcon.className = 'fa fa-language text-gray-400 transition-all duration-300';\n      }\n      \n      // 更新音频图标\n      updateAudioIcon();\n      \n      initAudio();\n      loadCustomWords();\n      generateKeyboard();\n      addEventListeners();\n      \n      updateLevelTabStates(); // 初始化级别标签状态\n      updateEmptyState();\n      \n      const filteredWords = getFilteredWords();\n      if (filteredWords.length > 0) {\n        setCurrentWord(0);\n      }\n    }\n\n    // 初始化应用\n    document.addEventListener('DOMContentLoaded', initApp);\n  </script>\n</body>\n</html>\n","isHtml":false,"htmlPath":"","htmlFiles":[],"prefix":"","pcRepo":"PakePlus-v212","iosRepo":"PakePlus-iOS-v212","androidRepo":"PakePlus-Android-v212","more":{"windows":{"label":"dccedcefedeb","title":"马承-新概念","url":"file:///C:/Users/Administrator/Desktop/acc/index.html.html","userAgent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36","width":800,"height":600,"theme":null,"resizable":true,"fullscreen":false,"maximized":false,"minWidth":400,"minHeight":300,"maxWidth":1920,"maxHeight":1080,"decorations":true,"transparent":false,"titleBarStyle":"Visible","visible":true,"focus":true,"closable":true,"minimizable":true,"maximizable":true,"alwaysOnTop":false,"alwaysOnBottom":false,"center":false,"shadow":true,"skipTaskbar":false,"tabbingIdentifier":null,"parent":null,"dragDropEnabled":true,"browserExtensionsEnabled":false,"devtools":true,"contentProtected":false,"hiddenTitle":false,"incognito":false,"proxyUrl":null,"useHttpsScheme":false,"zoomHotkeysEnabled":false,"acceptFirstMouse":false,"create":false,"backgroundColor":null,"backgroundThrottling":null,"javascriptDisabled":false}},"phone":{"safeArea":{"top":0,"bottom":0,"left":0,"right":0},"header":{"show":false,"title":"","backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","loading":false,"toolBar":false,"toolBarBackgroundColor":"","toolBarColor":"","toolBarFontSize":16,"toolBarFontWeight":"bold"},"siderMenu":{"show":false,"width":0,"backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","title":"","titleColor":"","titleFontSize":16,"titleFontWeight":"bold"},"tabBar":{"show":false,"backgroundColor":"","color":"","activeColor":"","fontSize":16,"fontWeight":"bold","tabBarItem":[]},"webview":{"userAgent":"","javaScriptEnabled":true,"domStorageEnabled":true,"allowFileAccess":true,"loadWithOverviewMode":true,"setSupportZoom":true,"clearCache":true}},"ios":{"name":"dccedcefedeb","showName":"马承-新概念","version":"0.0.1","webUrl":"file:///C:/Users/Administrator/Desktop/acc/index.html.html","id":"com.dccedcefedeb.pakeplus.ios","icon":"./app-icon.png","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","isHtml":false,"debug":false,"safeArea":"all"},"android":{"name":"dccedcefedeb","showName":"马承-新概念","version":"0.0.1","webUrl":"file:///C:/Users/Administrator/Desktop/acc/index.html.html","id":"com.dccedcefedeb.pakeplus.android","icon":"./app-icon.png","input":"./app-icon.png","output":"./res","rounded":true,"copyTo":"./app/src/main/res","androidResDir":"./app/src/main/res","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","isHtml":false,"debug":false,"safeArea":"all"},"desktop":{"name":"dccedcefedeb","showName":"马承-新概念","version":"0.0.1","id":"com.dccedcefedeb.pakeplus.desktop","desc":"打包仅限个人使用，请勿传播或商业用途，否则后果自负","webUrl":"file:///C:/Users/Administrator/Desktop/acc/index.html.html","iconPath":"../app-icon.png","inputPath":"../app-icon.png","tempPath":"./processed-image.png","icnsPath":"../src-tauri/icons/icon.icns","pubBody":"打包仅限个人使用，请勿传播或商业用途，否则后果自负","isHtml":false,"single":true,"state":true,"injectJq":false,"tauriApi":false,"buildMethod":"cloud","debug":true}}